#!/bin/bash
# NAS Docker 환경 초기 설정 스크립트
# NAS에서 직접 실행하는 스크립트
# 사용법: ssh -p 22022 crossman@192.168.0.5 후 실행

set -euo pipefail

# 색상 정의
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# ===========================================
# 1. 시스템 확인
# ===========================================
check_system() {
    log_info "시스템 환경 확인 중..."
    
    # Docker 설치 확인
    if ! command -v docker &> /dev/null; then
        log_error "Docker가 설치되지 않았습니다. DSM Package Center에서 Docker를 설치하세요."
        exit 1
    fi
    
    # Docker 서비스 확인
    if ! docker info &> /dev/null; then
        log_error "Docker 서비스가 실행되지 않습니다."
        exit 1
    fi
    
    log_success "Docker 설치 및 실행 확인 완료"
    
    # Docker Compose 확인 및 설치
    if ! command -v docker-compose &> /dev/null; then
        log_warning "Docker Compose가 설치되지 않았습니다. 설치 중..."
        install_docker_compose
    else
        log_success "Docker Compose 설치 확인 완료"
    fi
}

# ===========================================
# 2. Docker Compose 설치
# ===========================================
install_docker_compose() {
    log_info "Docker Compose 설치 중..."
    
    # 최신 버전 다운로드
    sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    
    # 실행 권한 부여
    sudo chmod +x /usr/local/bin/docker-compose
    
    # 심볼릭 링크 생성 (선택사항)
    sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
    
    # 설치 확인
    if docker-compose --version &> /dev/null; then
        log_success "Docker Compose 설치 완료"
    else
        log_error "Docker Compose 설치 실패"
        exit 1
    fi
}

# ===========================================
# 3. 디렉토리 구조 생성
# ===========================================
setup_directories() {
    log_info "디렉토리 구조 생성 중..."
    
    # 기본 디렉토리 생성
    mkdir -p /volume1/dev/{docker,data,config,logs}
    mkdir -p /volume1/dev/docker/{services,scripts}
    mkdir -p /volume1/dev/data/{postgres,n8n,gitea,code-server,uptime-kuma,portainer,mcp-server}
    mkdir -p /volume1/dev/config/{nginx,ssl,backup}
    mkdir -p /volume1/dev/logs/{nginx,services}
    
    # 권한 설정
    chown -R $(whoami):users /volume1/dev
    chmod -R 755 /volume1/dev
    
    log_success "디렉토리 구조 생성 완료"
    
    # 디렉토리 구조 출력
    log_info "생성된 디렉토리 구조:"
    tree /volume1/dev || ls -la /volume1/dev
}

# ===========================================
# 4. Docker 네트워크 생성
# ===========================================
setup_docker_network() {
    log_info "Docker 네트워크 설정 중..."
    
    # 기존 네트워크 확인 및 생성
    if ! docker network ls | grep -q "nas-services-network"; then
        docker network create \
            --driver bridge \
            --subnet=172.20.0.0/16 \
            --gateway=172.20.0.1 \
            nas-services-network
        log_success "Docker 네트워크 생성 완료: nas-services-network"
    else
        log_info "Docker 네트워크가 이미 존재합니다: nas-services-network"
    fi
    
    # 네트워크 정보 출력
    docker network inspect nas-services-network
}

# ===========================================
# 5. 환경 설정 파일 생성
# ===========================================
create_env_file() {
    log_info "환경 설정 파일 생성 중..."
    
    cat > /volume1/dev/docker/.env << 'EOF'
# NAS Docker Services Environment Configuration
# Generated by setup script

# ===========================================
# 기본 환경 설정
# ===========================================
COMPOSE_PROJECT_NAME=nas-services
DOCKER_NETWORK=nas-services-network

# NAS 정보
NAS_HOST=192.168.0.5
BASE_DOMAIN=crossman.synology.me

# ===========================================
# 데이터 경로
# ===========================================
DATA_ROOT=/volume1/dev/data
CONFIG_ROOT=/volume1/dev/config
LOGS_ROOT=/volume1/dev/logs

# ===========================================
# 서비스별 포트 매핑
# ===========================================
N8N_PORT=31001
MCP_PORT=31002
UPTIME_PORT=31003
CODE_PORT=8484
GITEA_HTTP_PORT=3000
GITEA_SSH_PORT=2222
PORTAINER_PORT=9000

# ===========================================
# 인증 정보 (변경 필요!)
# ===========================================
DB_PASSWORD=nas_secure_password_2025
N8N_PASSWORD=n8n_admin_password_2025
VSCODE_PASSWORD=vscode_admin_password_2025
GITEA_SECRET_KEY=gitea_secret_key_2025

# ===========================================
# SSL & 도메인 설정
# ===========================================
SSL_EMAIL=admin@crossman.synology.me
ENABLE_SSL=true

# ===========================================
# 타임존 설정
# ===========================================
TZ=Asia/Seoul
EOF
    
    log_success "환경 설정 파일 생성 완료: /volume1/dev/docker/.env"
    log_warning "보안을 위해 .env 파일의 비밀번호를 변경하세요!"
}

# ===========================================
# 6. 헬스체크 스크립트 생성
# ===========================================
create_health_check_script() {
    log_info "헬스체크 스크립트 생성 중..."
    
    cat > /volume1/dev/docker/scripts/health-check.sh << 'EOF'
#!/bin/bash
# Docker 서비스 헬스체크 스크립트

source /volume1/dev/docker/.env

echo "🏥 NAS Docker 서비스 헬스체크"
echo "시간: $(date)"
echo "==============================="

# 컨테이너 상태 확인
echo "📋 컨테이너 상태:"
docker-compose -f /volume1/dev/docker/docker-compose.yml ps

echo ""
echo "🌐 서비스 접속 테스트:"

# 서비스별 접속 테스트
declare -A services=(
    ["PostgreSQL"]="localhost:5432"
    ["n8n"]="localhost:$N8N_PORT"
    ["Gitea"]="localhost:$GITEA_HTTP_PORT"
    ["Code-Server"]="localhost:$CODE_PORT"
    ["Uptime-Kuma"]="localhost:$UPTIME_PORT"
    ["Portainer"]="localhost:$PORTAINER_PORT"
    ["MCP-Server"]="localhost:$MCP_PORT"
)

for service in "${!services[@]}"; do
    endpoint="${services[$service]}"
    host="${endpoint%%:*}"
    port="${endpoint##*:}"
    
    if nc -z "$host" "$port" 2>/dev/null; then
        echo "✅ $service ($endpoint): 정상"
    else
        echo "❌ $service ($endpoint): 비정상"
    fi
done

echo ""
echo "💾 디스크 사용량:"
df -h /volume1/dev

echo ""
echo "🔧 Docker 시스템 정보:"
docker system df
EOF
    
    chmod +x /volume1/dev/docker/scripts/health-check.sh
    log_success "헬스체크 스크립트 생성 완료"
}

# ===========================================
# 7. 백업 스크립트 생성
# ===========================================
create_backup_script() {
    log_info "백업 스크립트 생성 중..."
    
    cat > /volume1/dev/docker/scripts/backup-services.sh << 'EOF'
#!/bin/bash
# Docker 서비스 백업 스크립트

source /volume1/dev/docker/.env

BACKUP_DIR="/volume1/backup/docker-services/$(date +%Y%m%d_%H%M%S)"
mkdir -p "$BACKUP_DIR"

echo "📦 Docker 서비스 백업 시작"
echo "백업 경로: $BACKUP_DIR"

# 1. Docker Compose 설정 백업
echo "1. Docker Compose 설정 백업 중..."
cp -r /volume1/dev/docker "$BACKUP_DIR/"

# 2. 데이터베이스 백업
echo "2. 데이터베이스 백업 중..."
if docker ps | grep -q postgres; then
    docker exec $(docker ps -q -f name=postgres) pg_dumpall -U nasuser > "$BACKUP_DIR/database_backup.sql"
    echo "✅ 데이터베이스 백업 완료"
else
    echo "⚠️ PostgreSQL 컨테이너가 실행되지 않음"
fi

# 3. 서비스 데이터 백업
echo "3. 서비스 데이터 백업 중..."
tar -czf "$BACKUP_DIR/service_data.tar.gz" -C /volume1/dev data

# 4. 설정 파일 백업
echo "4. 설정 파일 백업 중..."
tar -czf "$BACKUP_DIR/config.tar.gz" -C /volume1/dev config

# 5. 백업 정보 파일 생성
cat > "$BACKUP_DIR/backup_info.txt" << BACKUP_INFO
백업 생성 시간: $(date)
백업 실행자: $(whoami)
시스템 정보: $(uname -a)
Docker 버전: $(docker --version)
Docker Compose 버전: $(docker-compose --version)

포함된 서비스:
$(docker-compose -f /volume1/dev/docker/docker-compose.yml ps --services)

컨테이너 상태:
$(docker-compose -f /volume1/dev/docker/docker-compose.yml ps)
BACKUP_INFO

echo "✅ 백업 완료: $BACKUP_DIR"
ls -la "$BACKUP_DIR"
EOF
    
    chmod +x /volume1/dev/docker/scripts/backup-services.sh
    log_success "백업 스크립트 생성 완료"
}

# ===========================================
# 8. 서비스 관리 스크립트 생성
# ===========================================
create_service_management_scripts() {
    log_info "서비스 관리 스크립트 생성 중..."
    
    # 서비스 시작 스크립트
    cat > /volume1/dev/docker/scripts/start-services.sh << 'EOF'
#!/bin/bash
cd /volume1/dev/docker
echo "🚀 Docker 서비스 시작 중..."
docker-compose up -d
echo "✅ 서비스 시작 완료"
docker-compose ps
EOF
    
    # 서비스 중지 스크립트
    cat > /volume1/dev/docker/scripts/stop-services.sh << 'EOF'
#!/bin/bash
cd /volume1/dev/docker
echo "🛑 Docker 서비스 중지 중..."
docker-compose down
echo "✅ 서비스 중지 완료"
EOF
    
    # 서비스 재시작 스크립트
    cat > /volume1/dev/docker/scripts/restart-services.sh << 'EOF'
#!/bin/bash
cd /volume1/dev/docker
echo "🔄 Docker 서비스 재시작 중..."
docker-compose restart
echo "✅ 서비스 재시작 완료"
docker-compose ps
EOF
    
    # 로그 확인 스크립트
    cat > /volume1/dev/docker/scripts/view-logs.sh << 'EOF'
#!/bin/bash
cd /volume1/dev/docker

if [ -z "$1" ]; then
    echo "사용법: $0 [서비스명]"
    echo "사용 가능한 서비스:"
    docker-compose ps --services
    exit 1
fi

echo "📋 $1 서비스 로그 확인 (최근 100줄)"
docker-compose logs --tail=100 -f "$1"
EOF
    
    # 실행 권한 부여
    chmod +x /volume1/dev/docker/scripts/*.sh
    
    log_success "서비스 관리 스크립트 생성 완료"
}

# ===========================================
# 메인 함수
# ===========================================
main() {
    log_info "=========================================="
    log_info "NAS Docker 환경 초기 설정 시작"
    log_info "=========================================="
    
    check_system
    setup_directories
    setup_docker_network
    create_env_file
    create_health_check_script
    create_backup_script
    create_service_management_scripts
    
    log_success "=========================================="
    log_success "NAS Docker 환경 설정 완료!"
    log_success "=========================================="
    
    log_info "다음 단계:"
    log_info "1. .env 파일의 비밀번호 변경: vi /volume1/dev/docker/.env"
    log_info "2. Docker Compose 파일 업로드: /volume1/dev/docker/docker-compose.yml"
    log_info "3. 서비스 시작: cd /volume1/dev/docker && docker-compose up -d"
    log_info "4. 상태 확인: /volume1/dev/docker/scripts/health-check.sh"
    
    log_info ""
    log_info "생성된 관리 스크립트:"
    log_info "- 헬스체크: /volume1/dev/docker/scripts/health-check.sh"
    log_info "- 백업: /volume1/dev/docker/scripts/backup-services.sh"
    log_info "- 서비스 시작: /volume1/dev/docker/scripts/start-services.sh"
    log_info "- 서비스 중지: /volume1/dev/docker/scripts/stop-services.sh"
    log_info "- 서비스 재시작: /volume1/dev/docker/scripts/restart-services.sh"
    log_info "- 로그 확인: /volume1/dev/docker/scripts/view-logs.sh [서비스명]"
}

# 스크립트 실행
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
